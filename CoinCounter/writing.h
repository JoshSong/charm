#pragma once

#include <stdlib.h>
#include <stdio.h>

namespace {
int trajLens[10] = {30, 10, 24, 23, 17, 26, 22, 18, 45, 26};

//int letterCount[16] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

///vector<float> zeroXs(0.1, 0.3, 0.4, 0.7, 0.9, 1.3, 1.7, 2.2, 3.0, 3.7,
//4.2, 4.6, 4.9, 5.1, 5.2, 5.3, 5.3, 5.2, 5.1, 4.8, 4.2, 3.4, 2.3, 1.4,
     //   0.5, 0.3, 0.0, 0.2, 0.1, 0.3);
 
float X0[30] = {0.1, 0.3, 0.4, 0.7, 0.9, 1.3, 1.7, 2.2, 3.0, 3.7,
        4.2, 4.6, 4.9, 5.1, 5.2, 5.3, 5.3, 5.2, 5.1, 4.8, 4.2, 3.4, 2.3, 1.4,
        0.5, 0.3, 0.0, 0.2, 0.1, 0.3};
// 0
//float X0[] = {0.466666666667, 0.266666666667, 0.233333333333, 0.6, 5.06666666667, 5.3, 5.23333333333, 4.8, 0.5};
//float Y0[] = {0.2, 0.633333333333, 9.53333333333, 9.86666666667, 9.86666666667, 9.53333333333, 0.433333333333, 0.133333333333, 0.233333333333};
float Y0[30] = {5.1, 5.4, 6.4, 7.3, 8.0, 8.6, 9.2, 9.6, 9.9, 9.9,
        9.6, 9.2, 8.6, 7.8, 6.9, 5.8, 4.6, 3.5, 2.6, 1.5, 0.5, 0.0, -0.1, 0.1,
        0.7, 1.5, 2.7, 3.6, 4.4,5.4};
 
float X1[10] = {1.4, 2.0, 2.4, 2.3, 2.4, 2.4, 2.3, 2.4, 2.3, 2.3};
float Y1[10] = {9.1, 9.7, 10.0, 9.7, 9.0, 7.2, 5.2, 3.0, 1.6, 0.2};
 
float x2[24] = {0.2, 0.8, 1.5, 2.3, 3.2, 4.1, 4.7, 5.0, 5.2, 5.1,
        4.7, 4.1, 3.4, 2.5, 1.8, 1.2, 0.6, 0.3, 0.2, 1.3, 2.2, 3.2, 4.3, 4.9};
float y2[24] = {8.4, 9.1, 9.5, 9.8, 9.8, 9.5, 8.9, 8.1, 7.3, 6.3,
        5.4, 4.8, 4.1, 3.6, 3.1, 2.4, 1.6, 0.9, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2};
 
float x3[23] = {0.3, 1.0, 1.8, 2.9, 3.6, 4.4, 4.9, 5.1, 5.0, 4.6,
        3.9, 2.9, 2.0, 3.3, 4.2, 4.7, 4.8, 4.6, 4.1, 3.2, 2.3, 1.1, 0.1};
float y3[23] = {7.9, 8.6, 9.1, 9.4, 9.2, 8.8, 8.2, 7.2, 6.2, 5.4,
        4.8, 4.5, 4.5, 4.4, 4.0, 3.3, 2.2, 1.5, 0.8, 0.4, 0.2, 0.1, 0.3};
 
float x4[17] = {7.4, 3.0, 1.9, 0.9, 0.9, 1.2, 2.9, 3.4, 3.9, 4.3,
        4.4, 4.4, 4.4, 4.4, 4.4, 4.4, 4.4};
float y4[17] = {4.7, 4.7, 4.7, 4.7, 5.2, 5.7, 7.8, 8.5, 9.1, 9.3,
        9.0, 8.4, 7.4, 6.5, 2.9, 0.9, 0.2};
//float x4[] = {4.43333333333, 4.23333333333, 0.233333333333, 6.46666666667};
//float y4[] = {0.166666666667, 9.9, 3.5, 3.5};
 
float x5[26] = {4.7, 2.8, 1.3, 0.8, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3,
        0.5, 1.0, 1.8, 2.8, 3.6, 4.3, 4.6, 4.8, 5.0, 5.0, 4.6, 4.0, 3.1, 1.7,
        1.0, 0.5};
float y5[26] = {9.7, 9.7, 9.7, 9.5, 9.1, 8.3, 7.4, 6.7, 5.7, 4.9,
        4.8, 5.0, 5.5, 5.7, 5.7, 5.2, 4.7, 4.0, 3.0, 2.1, 1.0, 0.4, 0.3, 0.2,
        0.5, 0.8};
 
float x6[22] = {4.2, 3.1, 2.2, 1.4, 0.7, 0.4, 0.4, 0.4, 0.8, 1.6,
        2.6, 3.7, 4.6, 5.4, 5.7, 5.7, 5.3, 4.4, 3.5, 2.3, 1.4, 0.4};
float y6[22] = {9.6, 9.2, 8.5, 7.4, 6.0, 4.6, 3.1, 1.9, 0.8, 0.2,
        0.0, 0.1, 0.6, 1.5, 2.5, 3.8, 4.6, 5.2, 5.4, 5.4, 4.9, 3.7};
 
float x7[18] = {0.2, 0.9, 1.8, 2.6, 3.5, 4.5, 5.5, 6.3, 5.9, 5.2,
        4.5, 4.2, 4.0, 3.7, 3.5, 3.4, 3.4, 3.4};
float y7[18] = {9.4, 9.4, 9.3, 9.3, 9.3, 9.4, 9.5, 9.6, 8.7, 7.9,
        7.0, 6.4, 5.6, 4.5, 3.6, 2.1, 1.2, -0.1};
 
float x8[45] = {3.1, 2.1, 1.0, 0.3, 0.2, 0.2, 0.2, 0.4, 0.6, 1.3,
        1.9, 2.5, 3.1, 4.0, 4.6, 4.8, 5.0, 4.8, 4.3, 3.7, 2.6, 1.8, 1.1, 0.6,
        0.3, 0.2, 0.2, 0.2, 0.2, 0.6, 1.1, 1.7, 2.3, 3.1, 3.6, 4.1, 4.4, 4.8,
        4.9, 4.9, 4.9, 4.7, 4.2, 3.7, 3.2};
float y8[45] = {9.8, 9.7, 9.4, 8.6, 8.1, 7.4, 6.7, 6.2, 5.9, 5.4,
        5.0, 4.9, 4.7, 4.1, 3.4, 3.0, 2.1, 0.7, 0.4, 0.1, 0.0, 0.1, 0.3, 0.7,
        1.3, 1.8, 2.3, 2.7, 3.5, 4.0, 4.5, 4.8, 5.0, 5.0, 5.2, 5.6, 5.9, 6.6,
        7.0, 7.4, 8.0, 8.6, 9.0, 9.4, 9.8};
 
float x9[26] = {1.8, 2.4, 2.9, 3.4, 3.8, 4.2, 4.5, 4.9, 5.0, 5.0,
        4.6, 4.0, 3.5, 2.9, 2.0, 1.3, 0.6, 0.3, 0.3, 0.5, 1.0, 1.7, 2.4, 3.4,
        4.2, 4.8};
float y9[26] = {-0.3, 0.4, 1.2, 2.0, 2.9, 3.8, 4.8, 6.0, 6.8, 7.9,
        8.8, 9.5, 9.8, 9.9, 9.8, 9.4, 8.8, 7.7, 7.0, 6.1, 5.4, 4.9, 4.9, 5.1,
        5.5, 6.4};

// 'M'
float MXs[] = {0.0666666666667, 2.2, 4.26666666667, 6.13333333333, 8.2};
float MYs[] = {-0.0333333333333, 9.9, 5.93333333333, 9.93333333333, -0.0333333333333};

// 'E'
float E1Xs[] = {5.3, 0.3, 0.266666666667, 5.53333333333 };
float E1Ys[] = {9.96666666667, 9.96666666667, 0.0666666666667, 0.0666666666667};

float E2Xs[] = {0.3, 5.63333333333};
float E2Ys[] = {5.46666666667, 5.53333333333};

// "T"
float T1Xs[] = {0.533333333333, 8.0};
float T1Ys[] = {9.83333333333, 9.8};

float T2Xs[] = {4.06666666667, 4.23333333333};
float T2Ys[] = {9.83333333333, 0.2};

// "R"
float RXs[] = {0.166666666667, 0.166666666667, 0.566666666667, 1.0, 1.5, 2.1, 2.9, 3.56666666667, 3.96666666667, 4.03333333333, 4.1, 4.06666666667, 3.86666666667, 3.66666666667, 2.96666666667, 2.3, 1.33333333333, 0.633333333333, 0.2, 0.8, 1.26666666667, 1.66666666667, 2.13333333333, 2.73333333333, 3.43333333333, 4.16666666667, 4.93333333333, 5.5};
float RYs[] = {0.0666666666667, 9.83333333333, 9.83333333333, 9.8, 9.73333333333, 9.56666666667, 9.23333333333, 8.93333333333, 8.46666666667, 8.13333333333, 7.36666666667, 6.9, 6.6, 6.53333333333, 6.2, 6.13333333333, 6.03333333333, 6.03333333333, 6.06666666667, 5.43333333333, 4.93333333333, 4.46666666667, 3.93333333333, 3.23333333333, 2.5, 1.63333333333, 0.8, 0.233333333333};

// "$"
float Dol1Xs[] = {6.8, 6.46666666667, 6.2, 5.7, 5.13333333333, 4.46666666667, 3.66666666667, 2.93333333333, 2.43333333333, 2.13333333333, 2.16666666667, 2.5, 2.8, 3.13333333333, 3.86666666667, 4.43333333333, 5.03333333333, 5.46666666667, 6.0, 6.36666666667, 6.56666666667, 6.4, 5.93333333333, 5.36666666667, 4.6, 3.8, 3.0, 2.4, 2.06666666667, 2.03333333333, };
float Dol1Ys[] = {7.36666666667, 7.8, 8.26666666667, 8.73333333333, 8.96666666667, 9.0, 8.83333333333, 8.5, 7.96666666667, 7.3, 6.73333333333, 6.3, 5.9, 5.46666666667, 4.7, 4.16666666667, 3.73333333333, 3.36666666667, 2.93333333333, 2.46666666667, 1.86666666667, 1.23333333333, 0.666666666667, 0.366666666667, 0.2, 0.2, 0.433333333333, 1.06666666667, 1.86666666667, 2.16666666667};

float Dol2Xs[] = { 3.76666666667, 4.03333333333};
float Dol2Ys[] = { 9.8, -0.0666666666667 };

float Dol3Xs[] = { 4.33333333333, 4.63333333333};
float Dol3Ys[] = {9.93333333333, 0.0};

// "."
float dotXs[] = {2.6, 2.6, 2.96666666667, 2.96666666667, 2.6, 2.56666666667, 2.9, 2.9, 2.7, 2.7, 2.86666666667, 2.86666666667, 2.7};
float dotYs[] = {0.133333333333, 0.566666666667, 0.566666666667, 0.133333333333, 0.133333333333, 0.5, 0.5, 0.166666666667, 0.166666666667, 0.433333333333, 0.433333333333, 0.233333333333, 0.233333333333};



 
std::vector<float> zeroXs (X0, X0 + sizeof(X0) / sizeof(X0[0]));
std::vector<float> zeroYs (Y0, Y0 + sizeof(Y0) / sizeof(Y0[0]));

std::vector<float> oneXs (X1, X1 + sizeof(X1) / sizeof(X1[0]));
std::vector<float> oneYs (Y1, Y1 + sizeof(Y1) / sizeof(Y1[0]));
std::vector<float> twoXs (x2, x2 + sizeof(x2) / sizeof(x2[0]));
std::vector<float> twoYs (y2, y2 + sizeof(y2) / sizeof(y2[0]));
std::vector<float> threeXs (x3, x3 + sizeof(x3) / sizeof(x3[0]));
std::vector<float> threeYs (y3, y3 + sizeof(y3) / sizeof(y3[0]));
std::vector<float> fourXs (x4, x4 + sizeof(x4) / sizeof(x4[0]));
std::vector<float> fourYs (y4, y4 + sizeof(y4) / sizeof(y4[0]));
std::vector<float> fiveXs (x5, x5 + sizeof(x5) / sizeof(x5[0]));
std::vector<float> fiveYs (y5, y5 + sizeof(y5) / sizeof(y5[0]));
std::vector<float> sixXs (x6, x6 + sizeof(x6) / sizeof(x6[0]));
std::vector<float> sixYs (y6, y6 + sizeof(y6) / sizeof(y6[0]));
std::vector<float> sevenXs (x7, x7 + sizeof(x7) / sizeof(x7[0]));
std::vector<float> sevenYs (y7, y7 + sizeof(y7) / sizeof(y7[0]));
std::vector<float> eightXs (x8, x8 + sizeof(x8) / sizeof(x8[0]));
std::vector<float> eightYs (y8, y8 + sizeof(y8) / sizeof(y8[0]));
std::vector<float> nineXs (x9, x9 + sizeof(x9) / sizeof(x9[0]));
std::vector<float> nineYs (y9, y9 + sizeof(y9) / sizeof(y9[0]));
std::vector<float> mxs (MXs, MXs + sizeof(MXs) / sizeof(MXs[0]));
std::vector<float> mys (MYs, MYs + sizeof(MYs) / sizeof(MYs[0]));
std::vector<float> e1xs (E1Xs, E1Xs + sizeof(E1Xs) / sizeof(E1Xs[0]));
std::vector<float> e1ys (E1Ys, E1Ys + sizeof(E1Ys) / sizeof(E1Ys[0]));
std::vector<float> e2xs (E2Xs, E2Xs + sizeof(E2Xs) / sizeof(E2Xs[0]));
std::vector<float> e2ys (E2Ys, E2Ys + sizeof(E2Ys) / sizeof(E2Ys[0]));
std::vector<float> t1xs (T1Xs, T1Xs + sizeof(T1Xs) / sizeof(T1Xs[0]));
std::vector<float> t1ys (T1Ys, T1Ys + sizeof(T1Ys) / sizeof(T1Ys[0]));
std::vector<float> t2xs (T2Xs, T2Xs + sizeof(T2Xs) / sizeof(T2Xs[0]));
std::vector<float> t2ys (T2Ys, T2Ys + sizeof(T2Ys) / sizeof(T2Ys[0]));
std::vector<float> rxs (RXs, RXs + sizeof(RXs) / sizeof(RXs[0]));
std::vector<float> rys (RYs, RYs + sizeof(RYs) / sizeof(RYs[0]));
std::vector<float> dol1xs (Dol1Xs, Dol1Xs + sizeof(Dol1Xs) / sizeof(Dol1Xs[0]));
std::vector<float> dol1ys (Dol1Ys, Dol1Ys + sizeof(Dol1Ys) / sizeof(Dol1Ys[0]));
std::vector<float> dol2xs (Dol2Xs, Dol2Xs + sizeof(Dol2Xs) / sizeof(Dol2Xs[0]));
std::vector<float> dol2ys (Dol2Ys, Dol2Ys + sizeof(Dol2Ys) / sizeof(Dol2Ys[0]));
std::vector<float> dol3xs (Dol3Xs, Dol3Xs + sizeof(Dol3Xs) / sizeof(Dol3Xs[0]));
std::vector<float> dol3ys (Dol3Ys, Dol3Ys + sizeof(Dol3Ys) / sizeof(Dol3Ys[0]));
std::vector<float> dotxs (dotXs, dotXs + sizeof(dotXs) / sizeof(dotXs[0]));
std::vector<float> dotys (dotYs, dotYs + sizeof(dotYs) / sizeof(dotYs[0]));
}